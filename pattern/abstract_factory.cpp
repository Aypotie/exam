#include <iostream>
using namespace std;

// –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
class Car {
public:
    virtual void drive() = 0;
    virtual ~Car() {}
};

// –≠–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª—å
class ElectricCar : public Car {
public:
    void drive() override {
        cout << "–ï–¥—É –Ω–∞ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–µ" << endl;
    }
};

// –ë–µ–Ω–∑–∏–Ω–æ–≤–∞—è –º–∞—à–∏–Ω–∞
class PetrolCar : public Car {
public:
    void drive() override {
        cout << "–ï–¥—É –Ω–∞ –±–µ–Ω–∑–∏–Ω–µ" << endl;
    }
};

// –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –∑–∞—Ä—è–¥–Ω—ã—Ö —Å—Ç–∞–Ω—Ü–∏–π
class ChargingStation {
public:
    virtual void charge() = 0;
    virtual ~ChargingStation() {}
};

// –≠–ª–µ–∫—Ç—Ä–æ–∑–∞–ø—Ä–∞–≤–∫–∞
class ElectricChargingStation : public ChargingStation {
public:
    void charge() override {
        cout << "–ó–∞—Ä—è–∂–∞—é —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª—å ‚ö°üîå" << endl;
    }
};

// –ë–µ–Ω–∑–æ–∑–∞–ø—Ä–∞–≤–∫–∞
class PetrolStation : public ChargingStation {
public:
    void charge() override {
        cout << "–ó–∞–ø—Ä–∞–≤–ª—è—é –±–µ–Ω–∑–∏–Ω ‚õΩ" << endl;
    }
};

//  –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω–∞—è —Ñ–∞–±—Ä–∏–∫–∞
class CarFactory {
public:
    virtual Car* createCar() = 0;
    virtual ChargingStation* createStation() = 0;
    virtual ~CarFactory() {}
};

class ElectricCarFactory : public CarFactory {
public:
    Car* createCar() override {
        return new ElectricCar();
    }
    ChargingStation* createStation() override {
        return new ElectricChargingStation();
    }
};

class PetrolCarFactory : public CarFactory {
public:
    Car* createCar() override {
        return new PetrolCar();
    }
    ChargingStation* createStation() override {
        return new PetrolStation();
    }
};

int main() {
    CarFactory* factory = new ElectricCarFactory(); 
    Car* myCar = factory->createCar();
    ChargingStation* myStation = factory->createStation();

    myCar->drive();      // "–ï–¥—É –Ω–∞ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–µ "
    myStation->charge(); // "–ó–∞—Ä—è–∂–∞—é —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª—å"

    delete myCar;
    delete myStation;
    delete factory;
    return 0;
}
